//-------------------------------------------------------------------------
//--------------------- Liste de Test pour automaton ----------------------
//-------------------------------------------------------------------------

//			void addState(int state);
OK	apres ajout = etat present
OK	ajout d'un etat deja present = etat present

//			void removeState(int state);
OK	etat non present = etat non present
OK	etat present = etat non present
OK	plusieurs etats present = seul l'etat a ete retirer 


//			bool hasState(int state) const;
OK	apres ajout = etat present
OK	sans ajout = etat non present
	

//			std::size_t countStates() const;
OK	sans etat = 0
OK	apres un ajout = 1
OK	apres un ajout et une suppression = 0

//		void setStateInitial(int state);
OK	sans etat = error
OK	un etat = etat present ET initial
OK	etat final = etat present ET final ET etat initial
OK	etat deja initial = etat present ET etat initial

//			bool isStateInitial(int state) const;
OK	sans etat = error
OK	avec un etat non initial et non final = false
OK	avec un etat non initial et final = false
OK	avec un etat initial et non final = true
OK	avec un etat initial et final = true

//			void setStateFinal(int state);
OK	sans etat = error
OK	un etat = etat present ET etat final
OK	etat initial = etat present ET final ET etat initial
OK	etat deja final = etat present ET etat final

//			bool isStateFinal(int state) const;
OK	sans etat = false
OK	avec un etat non initial et non final = false
OK	avec un etat non initial et final = true
OK	avec un etat initial et non final = false
OK	avec un etat initial et final = true

//			void addTransition(int from, char alpha, int to);
OK	sans etats (etat invalide) = error
OK	un etat transition sur lui meme = transition presente
OK	deux etat transition de l'un a l'autre = transition presente
OK	ajout transition avec caractere speciaux (char)1000 = transition non presente
OK	etat final transition sur lui meme = transition presente
OK	etat initial transition sur lui meme = transition presente
OK	etat final trans etat quelconque = transition presente
OK	etat initial trans etat quelconque = transition presente
OK	etat final trans etat final = transition presente
OK    etat initial trans etat initial = transition presente
OK	etat final trans etat initial = transition presente
OK	etat initial trans etat final = transition presente
OK	etat quelconque trans etat initial = transition presente
OK	etat quelconque trans etat final = transition presente

//			bool hasTransition(int from, char alpha, int to) const;
OK	sans etats = error
OK	etat valide -> etat invalide = error
OK	1 etat transition inexistante = false
OK	un etat transition sur lui meme = true
OK	deux etat transition de l'un a l'autre = true
OK	ajout transition avec caractere speciaux (char)1000 = false

//			void removeTransition(int from, char alpha, int to);
OK	sans etat = error
OK	suppression transition sur un etat = transition non presente
OK	suppression transition entre 2 etat = transition non presente
OK	supression d'une transition 1 etat inexistant = error
OK	supression d'une transition valide avec char invalide = error

//			std::size_t countTransitions() const;
OK	1 etat sans transition = 0
OK	1 etat 1 transition = 1
OK	2 etats 1 transition entre les 2 = 1
OK	2 etats 1 transition entre les 2,suppression transition = 0
OK	1 etats 1 transition ,suppression 1 etat = 0
OK	2 etats 1 transition entre les 2,suppression 1 etat = 0
Ok	2 etats 1 transition entre les 2,suppression 2 etats = 0

//			std::size_t getAlphabetSize() const;
OK	sans etat = 0
OK	1 etat sans transition = 0
OK	2 etats 1 transition entre les 2 = 1
OK	2 etats 1 transition entre les 2,suppression transition = 1
OK	2 etats 2 transition entre eux avec meme char = 1
OK	2 etats 2 transition entre eux avec meme char, suppression d'une transition = 1
OK	2 etats 2 transition entre eux avec meme char, suppression des transitions = 1
OK	2 etats 2 transition entre eux char different = 2
OK	2 etats 2 transition entre eux char different, suppression d'une transition = 2
Ok	2 etats 2 transition entre eux char different, suppression des transition = 2
	 

//			void dotPrint(std::ostream& os) const;
	non teste
	
//			void prettyPrint(std::ostream& os) const;
	non teste
	
//			bool isDeterministic() const;
OK	automat vide = false
OK	1 etat quelconque sans transition = false
OK	1 etat final = false
OK	1 etat initial = true
	2 etat initial = false
	

//			bool isComplete() const;
OK	automat vide = true
OK	automat complet = true
OK	automat incomplet = false
	
//			void makeComplete();
OK	automat vide = automat vide
OK	automat incomplet = automat complet
OK	automat complet = automat complet

//			void makeComplement();
OK	automat vide = automat vide
Ok	automat incomplet = meme automat
OK	automat complet = automat complementaire

//			bool isLanguageEmpty() const;
OK	automat vide = true
OK	automat sans transition = true
OK	automat avec transition = false

//			void removeNonAccessibleStates();
OK	etat inexistant
OK	1 etat quelconque = automat vide
OK	1 etat init = 1 etat init
OK	1 init + tansit lui meme = 1 etat init
OK	1 final = vide
OK	1 final + transit lui meme = vide
OK	1 etat quelconque + 1 init = 1 init
OK	1 etat final + 1 init = 1 init
OK	1 etat final + 1 init + 1 quelconque = 1 init
OK	1 etat quelconque + 1 init + transition entre eux = 1 init + 1 etat quelconque
OK	1 etat final + 1 init + transition entre eux= 1 init + 1 etat final
OK	1 etat init -> 1 quelconque -> 1 final transition entre chaque = 1 etat init -> 1 quelconque -> 1 final
	
//			void removeNonCoAccessibleStates();
OK	etat inexistant
OK	1 etat quelconque = automat vide
OK	1 init = automat vide
OK	1 init + transit lui meme = vide
OK	1 final = 1 final
OK	1 final + transit lui meme = 1 final
OK	1 init + 1 final = 1 final
OK	1 init + 1 quelconque + 1 final = 1 final
OK	1 init + 1 final + transition entre eux = 1 init + 1 final 
OK	1 init + 1 quelconque + 1 final + transition entre chaque = 1 init + 1 quelconque + 1 final 
	

// 			static Automaton createProduct(const Automaton& lhs, const Automaton& rhs);
OK	automat quelconque * automat vide = automat vide
OK	language 1 * language 2 = l1 U l2
!!!	completer
	
//			bool hasEmptyIntersectionWith(const Automaton& other) const;
OK	Intersection inexistante = false
OK	Intersection sur lui meme = true
OK	Intersection d'un automat existant a un automat inexistant = error
OK	Intersection d'un automat inexistant a un automat existant = false
OK	Intersection entre 2 automat existant =true

//			std::set<int> readString(const std::string& word) const;
OK	automat vide = set vide
OK	automat reconaissant L ; mot du language L = set des etats par ou passe le mot


//			bool match(const std::string& word) const;
OK	Language vide ; mot vide= true
OK	Language vide ; mot non vide= false
OK	Language non vide ; mot vide= false
OK	Language L ; mot du language L = true

static Automaton createDeterministic(const Automaton& automaton);
OK	automat vide = automat non determinist
OK	automat determinist = automat determinist
Ok	automat non determinist = automat determinist

//			bool isIncludedIn(const Automaton& other) const;
OK	language vide U language vide = true
OK	language vide U language non vide = true
OK	language non vide U language vide = false
OK	language L['a'] U language L['a','b'] = true
OK	language L['a','b'] U language L['a'] = false


//			static Automaton createMinimalMoore(const Automaton& automaton);
OK	automat vide = automat vide
OK	1 etat init = 1 etat init

	
//			static Automaton createMinimalBrzozowski(const Automaton& automaton);
OK	idem createMinimalMoore
	
//			static Automaton createMinimalHopcroft(const Automaton& automaton);
OK	idem createMinimalMoore
	
//			static Automaton createWithoutEpsilon(const Automaton& automaton);
OK	automat vide = aplhabet contient pas le code ascii 0
OK	1 etat init -> 1 etat quelconque -> 1 etat final = aplhabet contient pas le code ascii 0

